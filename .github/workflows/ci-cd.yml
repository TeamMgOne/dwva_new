name: DVWA CI/CD
on:
  push:
    branches: [ master ]


permissions:
  id-token: write      # required for OIDC
  contents: read

jobs:
  build-and-push-dev:
    runs-on: self-hosted
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}

    steps:
    # ----------------------------------------------------------------------
    # 1. Checkout
    # ----------------------------------------------------------------------
    - uses: actions/checkout@v3

    # ----------------------------------------------------------------------
    # 4. Install & configure JFrog CLI (OIDC)
    #    *Automatically sets* JFROG_CLI_BUILD_NAME = workflow name
    #                              JFROG_CLI_BUILD_NUMBER = run number
    # ----------------------------------------------------------------------
   
    - uses: jfrog/setup-jfrog-cli@v4
      env:
          JF_URL: https://accenture2025.jfrog.io 
      with:
          oidc-provider-name: aaron 
        
    - name: Verify CLI config
      run: jf config show
      
    # ----------------------------------------------------------------------
    # 2. Docker login (plain Docker – registry creds still needed)
    # ----------------------------------------------------------------------
    - name: Docker login to Artifactory
      run: echo '${{ secrets.JFROG_PASSWORD }}' |docker login ${{ secrets.DOCKER_REPO_DEV }} --username ${{ secrets.JFROG_USERNAME }} --password-stdin

    # ----------------------------------------------------------------------
    # 3. Build the image
    # ----------------------------------------------------------------------
    - name: Build DVWA
      run: docker build -t dvwa:latest .

    - name: Generate & expose image tag
      id: set_tag
      run: echo "TAG=${GITHUB_SHA::7}" | tee -a "$GITHUB_ENV" "$GITHUB_OUTPUT"

    - name: Tag image
      run: docker tag dvwa:latest ${{ secrets.DOCKER_REPO_DEV }}/docker-dev/dvwa:dev-$TAG

    # ----------------------------------------------------------------------
    # 5. Push image *with* build-info in one command
    #    (build-name/number auto-picked up, no --url flag needed)
    # ----------------------------------------------------------------------
    - name: Push image + build-info
      run: jf rt docker-push \
              ${{ secrets.DOCKER_REPO_DEV }}/docker-dev/dvwa:dev-$TAG docker-dev

    # ----------------------------------------------------------------------
    # 6. Evidence – generate key (demo) & attach predicate to the build
    # ----------------------------------------------------------------------
    - name: Generate temp RSA keypair
      run: |
        openssl genrsa  -out private.pem 2048
        openssl rsa -in private.pem -pubout -out public.pem
        jf rt security-keypair-create dvwa-ci-key --public-key=public.pem

    - name: Create predicate JSON
      run: |
        cat > run_info.json <<EOF
        {
          "name":       "${{ github.workflow }}",
          "timestamp":  "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "initiator":  "${{ github.actor }}"
        }
        EOF

    - name: Sign & attach Evidence
      run: |
        jf evd create \
           --predicate=run_info.json \
           --predicate-type=https://in-toto.io/attestation/test-result/v0.1 \
           --key=private.pem
        echo '✅ Evidence attached' >> $GITHUB_STEP_SUMMARY

  # ------------------------------------------------------------------------
  # 7. Test / verify stage – unchanged except it pulls the tag from outputs
  # ------------------------------------------------------------------------
  test-scan-and-verify:
    needs: build-and-push-dev
    runs-on: ubuntu-latest
    environment: test

    steps:
    - name: Manual approval
      run: echo "Test stage approved."

    - name: Docker login
      run: echo '${{ secrets.JFROG_PASSWORD }}' | \
           docker login ${{ secrets.DOCKER_REPO_DEV }} \
             --username ${{ secrets.JFROG_USERNAME }} --password-stdin

    - name: Pull dev image
      run: docker pull \
           ${{ secrets.DOCKER_REPO_DEV }}/docker-dev/dvwa:dev-${{ needs.build-and-push-dev.outputs.tag }}

    # … the rest of your health-check steps stay the same …

    - name: Health check DVWA
      run: |
        for i in {1..10}; do
          STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:8080)
          if [ "$STATUS" -eq 200 ]; then
            echo "DVWA running properly."
            exit 0
          fi
          echo "Attempt $i: HTTP $STATUS"
          sleep 5
        done
        echo "DVWA didn't start properly, logs:"
        docker logs dvwa-test
        exit 1

    - name: Terminate DVWA container
      run: docker stop dvwa-test
